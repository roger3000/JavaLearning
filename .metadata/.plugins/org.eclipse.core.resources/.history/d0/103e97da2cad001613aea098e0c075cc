package com.eric.java.basecontainer.basetool;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Random;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import sun.io.ByteToCharConverter;

public class Utilities {

	private static final String BASE_STRING = "fmccbi";

	/* 过滤特殊的HTML标记 */
	public static String filterHTMLTag(String input)
	{
		StringBuffer buffer = new StringBuffer(input.length());
		char c;

		for(int i=0;i<input.length();i++)
		{
			c = input.charAt(i);
			if(c == '<')
			{
				buffer.append("&lt;");
			}
			else if(c == '>')
			{
				buffer.append("&gt;");
			}
			else if(c == '"')
			{
				buffer.append("&quot;");
			}
			else if(c == '&')
			{
				buffer.append("&amp;");
			}
			else
			{
				buffer.append(c);
			}
		}
		return (buffer.toString());
	}

	/* 返回某月的天数 */
	public static int getDays(int mon)
	{
		int mon_mm = mon % 100;
		int mon_yyyy = mon / 100;
		int count;
		if(mon_mm < 13)
		{
			if(((mon_yyyy % 400 == 0) || (mon_yyyy % 4 == 0 && mon_yyyy % 100 > 0)) && mon_mm == 2) count = 29;
			else if((mon_mm == 1) || (mon_mm == 3) || (mon_mm == 5) || (mon_mm == 7) || (mon_mm == 8) || (mon_mm == 10) || (mon_mm == 12)) count = 31;
			else if((mon_mm == 4) || (mon_mm == 6) || (mon_mm == 9) || (mon_mm == 11)) count = 30;
			else count = 28;
		}
		else count = 1;
		return count;
	}

	/*中文写入数据库时进行转换*/
	public static String writeChinese(String s)
	{
		char[] orig =s.toCharArray();
		byte[] dest =new byte[orig.length];
		for(int i=0;i<orig.length;i++) dest[i] =(byte)(orig[i]&0xFF);
		try
		{
			ByteToCharConverter toChar =ByteToCharConverter.getConverter("gb2312");
			return new String(toChar.convertAll(dest));
		}
		catch(Exception e){return s;}
	}

  /*转换字符串*/
	public static String convertStr(String s)
	{
		String oldStr = s;
		String newStr;
		if(oldStr.indexOf("'") != -1) newStr = oldStr.replaceAll("\\'","''");
		else newStr = oldStr;
		return newStr;
	}

  /*转码函数，防止中文显示为乱码*/
	public static String convertString(String msg)
	{
		String convertMsg;
		try
		{
			convertMsg = new String(msg.getBytes("ISO-8859-1"),"GB2312");
			return convertMsg;
		}
		catch(UnsupportedEncodingException ex)
		{
			return "can't not encoding code";
		}
	}

	 /* 返回Cookie的值 */
	public static String getCookieValue(String cookieName,HttpServletRequest req)
	{
		Cookie[] cookies = req.getCookies();

		if(cookies == null) return "";
		for(int i=0;i<cookies.length;i++)
		{
			Cookie cookie = cookies[i];
			if(cookieName.equals(cookie.getName())) return (cookie.getValue());
		}
		return "";
	}

	/* 设置Cookie的值 */
	public static void setCookie(Cookie cookie,int maxAge,HttpServletResponse res)
	{
		cookie.setMaxAge(maxAge);
		res.addCookie(cookie);
	}

	/* 判断Cookie的值 */
	public static boolean isSetCookie(String cookieName,HttpServletRequest req)
	{
		return (getCookieValue(cookieName,req) == null ? false : true);
	}

	private static String toHexString(int i)
	{
		String sTemp;
		sTemp = Integer.toHexString(i).toUpperCase();

		return (sTemp.length() < 2) ? "0" + sTemp : sTemp;
	}

	/* 加密算法 */
	public static String bindPassword(String pass)
	{
		int strLen;
		String sTemp;
		String sRet;

		sRet = "";
		strLen = pass.length();

		for (int i=0; i<strLen; i++) {
			sTemp = toHexString((int)pass.charAt(i) + (int)BASE_STRING.charAt(i % 4));
			if (sTemp.length() != 2) sTemp = "" + (i+1) + sTemp;
			sRet = sRet + sTemp;
		}

		for (int i=0; i<15-strLen; i++) {
			sRet = sRet + toHexString((int)BASE_STRING.charAt(i % 4) + strLen);
		}

		sRet = sRet + toHexString(strLen+6);

		return sRet;
	}

	/* 解密算法 */
	public static String unBindPassword(String pass)
	{
		int strLen;
		String sTemp;
		String sRet;

		if (pass.length() != 32) return "";

		sTemp = pass.substring(30,32);
		strLen = hexStringToInt(sTemp) - 6;

		if (strLen > 30) return "";

		sRet = "";
		for (int i=0; i<strLen; i++) {
			sTemp = pass.substring(i*2, i*2+2);
			sRet += (char)(hexStringToInt(sTemp) - BASE_STRING.charAt(i % 4));
		}

		return sRet;
	}

	private static int hexStringToInt(String sHex)
	{
		try{return Integer.parseInt(sHex, 16);}
		catch (NumberFormatException ex){return 0;}
	}

	public static String formatData(double pass,String formatstr)
	{
		try
		{
			java.text.DecimalFormat nf = (java.text.DecimalFormat)java.text.NumberFormat.getInstance();
			nf.applyPattern(formatstr);
			return nf.format(pass);
		}
		catch(Exception e){return String.valueOf(pass);}
	}

	public static String formatData(double pass)
	{
		try
		{
			java.text.DecimalFormat nf = (java.text.DecimalFormat)java.text.NumberFormat.getInstance();
			nf.applyPattern("#,###.#");
			return nf.format(pass);
		}
		catch(Exception e){return String.valueOf(pass);}
	}

	public static String formatData2(double pass)
	{
		try
		{
			java.text.DecimalFormat nf = (java.text.DecimalFormat)java.text.NumberFormat.getInstance();
			nf.applyPattern("#.#");
			return nf.format(pass);
		}
		catch(Exception e){return String.valueOf(pass);}
	}

	public static String formatData3(double pass)
	{
		try
		{
			java.text.DecimalFormat nf = (java.text.DecimalFormat)java.text.NumberFormat.getInstance();
			nf.applyPattern("#");
			return nf.format(pass);
		}
		catch(Exception e){return String.valueOf(pass);}
	}

	public static String percentData(double pass)
	{
		try
		{
			java.text.DecimalFormat nf = new java.text.DecimalFormat("####.00");
			return nf.format(pass * 100) + "%";
		}
		catch(Exception e){return String.valueOf(pass);}
	}

	public static String formatStr(String str,int len)
	{
		if(str.length() <= len) return str;
		else return str.substring(0,len - 3) + "...";
	}

	public static String getCurrentTime() 
	{
		Calendar now = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		return sdf.format(now.getTime());
	}
	
 public static String randomPasswd()
 {
     Random r = new Random ();
     byte b[] = new byte[7];
     r.nextBytes (b);
     String s = "";
     for ( int i = 0; i < b.length; i++ ) {
         s += (int) ((b[i] & 0x7f) % 10);
     }
     return s;
 }

}
